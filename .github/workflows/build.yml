name: Build and Release Electron App

on:
  push:
    branches: [master]
    paths: ['**']
  pull_request:
    branches: [master]
    paths: ['**']

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild

      - name: Build Electron app for Linux
        run: npm run build && npm run dist

      - name: Upload Linux build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-artifact
          path: dist/

  build-windows:
    runs-on: windows-latest
    needs: build-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild --force

      - name: Build Electron app for Windows
        run: npm run build && npm run dist

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifact
          path: dist/

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    env:
      RELEASE_TAG: v${{ github.run_id }}

    steps:
      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build-artifact
          path: release-files/linux

      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build-artifact
          path: release-files/windows

      - name: List downloaded artifacts
        run: |
          echo "--- Listing contents of release-files ---"
          find release-files -ls
          echo "--- End of listing ---"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: VBC - ${{ steps.date.outputs.date }}
          files: |
            release-files/linux/*.AppImage
            release-files/windows/*.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
